/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "bivariateGaus.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(bivariateGaus); 

 bivariateGaus::bivariateGaus(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _y,
                        RooAbsReal& _px,
                        RooAbsReal& _sx,
                        RooAbsReal& _py,
                        RooAbsReal& _sy,
                        RooAbsReal& _r) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   y("y","y",this,_y),
   px("px","px",this,_px),
   sx("sx","sx",this,_sx),
   py("py","py",this,_py),
   sy("sy","sy",this,_sy),
   r("r","r",this,_r)
 { 
 } 


 bivariateGaus::bivariateGaus(const bivariateGaus& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   y("y",this,other.y),
   px("px",this,other.px),
   sx("sx",this,other.sx),
   py("py",this,other.py),
   sy("sy",this,other.sy),
   r("r",this,other.r)
 { 
 } 



 Double_t bivariateGaus::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return 1/(2*3.14157*sx*sy*sqrt(1-pow(r,2)))*exp(-1/(2*(1-pow(r,2)))*(pow(((x-px)/sx),2)-2*r*((x-px)/sx)*((y-py)/py)+pow(((y-py)/py),2))) ; 
 } 



